* Apollo 配置中心

** 什么是配置中心

传统单体应用存在缺陷，规模扩大之后部署效率低，团队协作效率差，维护困难。所以需要一个统一的
配置中心，对微服务的配置进行统一的管理。总的来说就是“统一管理各种应用配置的基础服务组件”

微服务架构图:


[[file:~/Documents/GitHub/Note/Image/newsfeed-future.jpg][微服务架构]]

配置中心就是将配置单独抽离出来

** 配置中心解决的问题

1. 配置项容易的去进行读取和修改
2. 添加新的配置项简单
3. 支持对配置的修改
4. 可以查看配置的修改历史
5. 不同的部署环境支持隔离

** 主流的配置中心

1. Disconf  百度
2. SpringCloud Config 
3. Apollo  携程
4. Nacos 阿里

| 功能点       | springcloud | apollo   | nacos    |
|--------------+-------------+----------+----------|
| 配置实时推送 | 支持        | 支持     | 支持     |
| 版本管理     | 支持git     | 支持     | 支持     |
| 配置回滚     | 支持git     | 支持     | 支持     |
| 灰度发布     | 支持        | 支持     | 不支持   |
| 权限管理     | 依赖git     | 支持     | 不支持   |
| 多集群       | 支持        | 支持     | 支持     |
| 多环境       | 支持        | 支持     | 支持     |
| 监听查询     | 支持        | 支持     | 支持     |
| 多语言       | java        | 主流语言 | 主流语言 |
| 配置格式校验 | 不支持      | 支持     | 支持     |

** 简介

Apollo（阿波罗） 携程框架部门开发的配置中心，能够集中管理不同环境不同集群的配置，配置
修改之后可以推送到应用端，适用于微服务配置管理

Apollo 主要包含两部分，服务端和客户端，基于springboot 和 springcloud 开发打包后直接运行

执行流程
[[file:~/Documents/GitHub/Note/Image/apollo.png][执行流程]]

** Apollo 特性

*** 统一管理不同环境、不同集群的配置

Apollo提供了一个统一界面集中式管理不同环境（environment）、不同集群（cluster）、不同命名空间（namespace）的配置。
同一份代码部署在不同的集群，可以有不同的配置，比如zk的地址等
通过命名空间（namespace）可以很方便的支持多个不同应用共享同一份配置，同时还允许应用对共享的配置进行覆盖
配置界面支持多语言（中文，English）

*** 配置修改实时生效（热发布）

用户在Apollo修改完配置并发布后，客户端能实时（1秒）接收到最新的配置，并通知到应用程序。

*** 版本发布管理

所有的配置发布都有版本概念，从而可以方便的支持配置的回滚。

*** 灰度发布

支持配置的灰度发布，比如点了发布后，只对部分应用实例生效，等观察一段时间没问题后再推给所有应用实例。

*** 权限管理、发布审核、操作审计

应用和配置的管理都有完善的权限管理机制，对配置的管理还分为了编辑和发布两个环节，从而减少人为的错误。
所有的操作都有审计日志，可以方便的追踪问题。

*** 客户端配置信息监控

可以方便的看到配置在被哪些实例使用

*** 提供Java和.Net原生客户端

提供了Java和.Net的原生客户端，方便应用集成
支持Spring Placeholder，Annotation和Spring Boot的ConfigurationProperties，方便应用使用（需要Spring 3.1.1+）
同时提供了Http接口，非Java和.Net应用也可以方便的使用

*** 提供开放平台API

Apollo自身提供了比较完善的统一配置管理界面，支持多环境、多数据中心配置管理、权限、流程治理等特性。
不过Apollo出于通用性考虑，对配置的修改不会做过多限制，只要符合基本的格式就能够保存。
在我们的调研中发现，对于有些使用方，它们的配置可能会有比较复杂的格式，如xml, json，需要对格式做校验。
还有一些使用方如DAL，不仅有特定的格式，而且对输入的值也需要进行校验后方可保存，如检查数据库、用户名和密码是否匹配。
对于这类应用，Apollo支持应用方通过开放接口在Apollo进行配置的修改和发布，并且具备完善的授权和权限控制
*** 部署简单

配置中心作为基础服务，可用性要求非常高，这就要求Apollo对外部依赖尽可能地少
目前唯一的外部依赖是MySQL，所以部署非常简单，只要安装好Java和MySQL就可以让Apollo跑起来
Apollo还提供了打包脚本，一键就可以生成所有需要的安装包，并且支持自定义运行时参数


** 环境搭建

1. 下载 apollo-build-scripts 项目

地址: https://github.com/nobodyiam/apollo-build-scripts

2. 下载解压文件之后，有 demo.sh 其中 数据库连接和密码进行更改

# apollo config db info
apollo_config_db_url="jdbc:mysql://localhost:3306/ApolloConfigDB?characterEncoding=utf8&serverTimezone=Asia/Shanghai"
apollo_config_db_username=root
apollo_config_db_password=root

# apollo portal db info
apollo_portal_db_url="jdbc:mysql://localhost:3306/ApolloPortalDB?characterEncoding=utf8&serverTimezone=Asia/Shanghai"
apollo_portal_db_username=root
apollo_portal_db_password=root

3. 数据库初始化脚本

地址： https://github.com/nobodyiam/apollo-build-scripts/tree/master/sql

4. 初始化执行完成之后，对demo.sh 添加可执行权限 执行

./demo.sh start

5. 运行结束之后会开启 对应的 admin portol config 三个服务， 即可进行单机调试运行了


** SpringBoot 应用集成 apollo 配置

1. 添加相关依赖

        <!-- https://mvnrepository.com/artifact/com.ctrip.framework.apollo/apollo-client -->
        <dependency>
            <groupId>com.ctrip.framework.apollo</groupId>
            <artifactId>apollo-client</artifactId>
            <version>1.8.0</version>
        </dependency>
        <!-- https://mvnrepository.com/artifact/org.apache.commons/commons-lang3 -->
        <dependency>
            <groupId>org.apache.commons</groupId>
            <artifactId>commons-lang3</artifactId>
            <version>3.12.0</version>
        </dependency>

2. 在 http://127.0.0.1:8070/ 配置中心，添加应用并且应用

（1）部门
（2）AppId
（3）应用名称
（4）应用负责人
（5）项目管理员

3. 在配置界面添加对应的配置

[[file:~/Documents/GitHub/Note/Image/%E5%BA%94%E7%94%A8%E9%85%8D%E7%BD%AE.png][应用配置]]

4. 在应用的启动类中添加 apollo 注解

@EnableApolloConfig

5. 应用中添加 apollo 的相关配置

app:
  id: springboot-apollo
apollo:
  meta: http://127.0.0.1:8080
  bootstrap:
    enabled: true
    eagerLoad:
      enabled: true

** 测试

启动应用之后即可进行测试, 每当 apollo 发布之后即可重启应用更新对应的配置

