* Auth2.0 相关知识点

**  auth2.0 的四种模式

1. 授权码模式

（1）客户端携带 client_id, scope,redirect_uri,state 等信息引导用户请求授权服务器的授权端点下发code
（2）授权服务器验证客户端身份，验证通过则询问用户是否同意授权（条转到用户能够直观看到的授权页面，等待用户点击确认授权）
（3）假设用户同意授权，此时授权服务器将code 和 state（如果客户端传递了该参数）拼接在 redirect_uri 后面 302 形式下发code
（4）客户端携带 code redirect_uri 以及client secret 请求授权服务器的令牌端点下发 access_token 
（5）授权服务器验证客户端身份同时验证 code 以及 redirect_uri 是否与请求code 时相同，验证通过后下发 access_token 并选择性下发 refresh_token.

2. 隐式授权模式
有些纯前端应用，没有后端。这时就不能用上面的方式了，必须将令牌存储在前端。 这种方式没有授权码 这个中间步骤
（1) 客户将用户向导至授权服务器
(2) 用户决定是否授权给客户端
(3) 用户同意授权，将用户向导客户端指定的 重定向 URI 并在 URI 的 hash 部分包含了访问令牌。
(4) 浏览器向资源服务器发出请求，其中不包括上一步收到的 hash 值。
(5) 资源服务器返回一个网页其中包含代码可以获取hash 值中的令牌。
(6) 浏览器执行上一步获取脚本提取令牌。
(7) 浏览器将令牌发给客户端。


3.资源所有者密码凭证模式
高度信任某个应用 允许用户把用户名和密码 告诉应用。应用用用户的用户名和密码区申请令牌

（1）用户向客户端提供用户名和密码
（2）客户端将用户名和密码发给认证服务器，向认证服务器请求令牌
（3）认证服务器确认无误后，向客户端n提供给访问令牌

4. 客户端凭证模式

客户端请求访问其控制下的保护资源时，客户端只能使用其客户端凭据，或其他支持的身份验证方法来请求访问令牌。


** Auth2.0 定义了4种服务角色

1. 资源所有者 Resource Owner 能够授权对受保护资源的访问权限的实体，当资源所有者是人时，资源所有者就是最终用户。
2. 资源服务器，Resource server 托管保护资源的服务器，能够使用访问令牌接受和响应受保护的资源请求。
3. 客户端，代表资源所有者，经其授权之后对向保护资源发起请求的服务器。
3. 授权服务器，授权服务器对所有者进行认证并获取授权之后，向客户端办法访问令牌。

** 授权流程

1. 用户访问第三方应用程序以后，客户端要求用户给予授权。
2. 用户同意授权
3. 客户端使用第二部获得的授权向服务器申请令牌，
4. 认证服务器对客户端进行认证以后，确认无误，同意发放令牌
5. 客户端使用令牌，向资源服务器发送申请获取资源
6. 资源服务器确认令牌无误之后，向客户端开放资源

