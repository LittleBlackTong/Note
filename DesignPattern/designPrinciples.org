* 六大设计基本原则

**  单一指责原则

核心思想：应该有且仅有一个一个原因引起类的变更
问题描述：加入有类 class1 完成了 T1 T2 当指责 T1 T2 有变更需要修改时 可能影响另一个类的正常工作
好处： 降低复杂度，提高可读性，可维护性提高，扩展性提高，降低了变更引起的风险
需注意： 单一职责原则提出了一个编写程序的标准或变化原因，来衡量接口或类设计的是否优良，

** 里氏替换原则

核心思想： 在使用基类的地方，可以使用任何子类进行替换
通俗来说： 只要父类能出现的地方子类就能出现。反之 父类未必能胜任。
好处： 增强程序的健壮性，即使增加了子类，原来的子类仍然可以运行。
需要注意： 如果子类不能完整的实现父类的方法，或者某些方法在子类中发生了”畸变“ 建议断开
父子的继承关系 采用依赖，聚合，组合的关系代替继承

** 依赖倒置原则

核心思想： 高层模块不应该依赖底层模块，两者都应该依赖对应的抽象；抽象不应该依赖细节，细节应该依赖于抽象
通俗来讲： 就是依赖倒置原则本质就是通过抽象，使哥哥类或者模块的实现彼此独立，互不影响实现模块之间的松耦合

** 接口隔离原则

核心思想： 类之间的依赖关系应该建立在最小的接口上
通俗来讲： 建立单一的接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为
各个类去建立专用的接口，而不要试图去建立一个庞大的接口供所有依赖它的类去调用
好处： 提高内聚减少对外的交互

** 迪米特法则

核心思想： 类间进行解耦
通俗来讲： 一个类对自己依赖的类知道的越少越好。

** 开闭原则

对扩展开放，对修改关闭

一句话概括:单一职责原则告诉我们实现类要职责单一；里氏替换原则告诉我们不要破坏继承体系；依赖倒置原则告诉我们
要面向接口编程；接口隔离原则告诉我们在设计接口的时候要精简单一；迪米特法则告诉我们要降低耦合。
而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。
