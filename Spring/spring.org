* Spring 知识点

** 什么是 spring

   spring 是一种轻量级开发框架,用来提高开发人员的开发效率，提高系统可维护。其中有一些核心模块如：核心容器，数据访问，aop，测试 等。
CoreContainer 中的Core 组件，是Spring所有组件的核心，Beans组件和Context组件是实现（反转控制）ioc 和依赖注入（di）的基础， aop 用来实现面向a切面编程的。

** 一些重要的 Spring 模块

1. SpringCore：spring 的基础，可以说spring其他所有的功能，都需要依赖于该类库，主要提供ioc依赖注入功能。
2. SpringAop：提供了面向切面编程的实现，
3. SpringJDBC：Java 数据库连接
4. SpringJMS： java 消息服务
5. SpringORM ：用于支持hibernate等 orm 工具的
6. SpringWeb：提供 web 支持
7. SpringTest： 提供了对JUnit测试支持

** 谈谈自己对 ioc 和 aop 的理解

*** ioc（反转控制）

:: ioc 反转控制，是一种设计思想，就是将原本程序中手动创建对象的控制，交给spring框架来管理，ioc 其他语言也有，ioc 容器是 spring 用来实现ioc的载体，ioc容器实际上是个Map
（key，value） map中存放的就是各种对象。
:: 将对象之间的项目依赖关系交给ioc容器来管理，并由ioc容器来完成对象注入，可以简化引用的开发，把应用从复杂的依赖 关系中解放出来，ioc 就是一个工厂，当我们需要创建一个对象的时候，
配置好配置文件\注解即可，简化了开发的难度

*** ioc 的初始化过程

xml->读取->Resource->解析->BeanDefinition->注册->BeanFactory

*** aop（面向切面编程）

:: AOP （Aspect-Oriented-Programmint：面向切面编程） 将业务无关的，为业务模块所共同调用的逻辑，或责任，如事物处理，日志管理，权限控制）封装起来，便于减少系统中的重复代码，降低模块之间的耦合；
:: Spring AOP 是基于动态 代理实现的，如果要嗲里的对象，实现了某个接口，那么SpringAop会使用jdk proxy 创建代理对象，这时候SpringAop  就会使用Cglib生成一个被代理对象的子类，来作为代理
:: 也可以使用 AspectJ 来实现
:: 使用AOP之后可以将一些通用功能抽出来在需要用的地方直接使用即可，大大简化了代码量，提高系统扩展性

** springAop 和 AspectJ Aop 有什么区别

:: SpringAop 是运行是增强，而AspectJ 是编译时增强，SpringAop 基于代理实现，AspectJ 是基于字节码操作的。
:: SpringAop 集成了AspectJ AspectJ 比SrpingAop 功能强大，SpringAop 相对简单
:: 性能上考虑 AspectJ 性能更好

** springBean 的作用域有哪些？
:: singleton：唯一的bean实例，，Spring 中的 bean 默认都是单例的。
:: prototype：每次请求都会创建一个新的实例
:: request : 每次Http请求都会产生一个新的bean，该bean仅在当前http request 内有效
:: session : 每一次http请求都会残生一个新的bean，bean仅在当前session 内有效
:: global-session：全局sesion作用域,仅在protlet的web应用中才有意义，

** spring 中的单例 bean 的线程安全问题

:: 单例的 bean 对象在多线程的情况下，写操作时会存在线程安全问题
:: 常见的解决办法有两种 1.bean对象中尽量避免定义可变的成员编程 2. 类中定义ThreadLocal对象，将需要的可变的成员变量保存在ThreadLocal中

** Spring Bean 的生命周期

 + Bean 容器找到配置文件中的 Spring Bean 的定义
 + Bean 容器利用 Java Reflection API 创建一个 Bean 实例
 + 如果涉及到一些属性值利用set 方法设置
 + 如果 Bean 实现了 BeanNameAware 接口 ，调用了 setBeanName（）方法，传入Bean的名字
 + 如果 Bean 实现了 BeanClassLoaderAware 接口，调用 setBeanClassLoader（）方法，传入 ClassLoader（） 对象实例
 + 如果 Bean 实现了 BeanFactoryAware 接口，调用 setBeanClassLoader（）方法，传入Classloader 对象的实例
 + 与上面的类似，如果实现了其他 *。Aware 接口，就调用相应的方法
 + 如果有和加载这个Bean 的Spring 容器相关的 BeanPostProcessor 对象，执行 postProcessBeforeInitialization（）方法完成
 + 如果Bean实现了 InitializingBean 接口执行 afterPropertiesSet方法
 + 如果Bean 在配置文件中定义包含 init-method 属性，执行指定的方法。
 + 如果 有加载和这个 Bean 的Spring 容器相关的BeanPostProcessor 对象，执行 postProcessAfterInitialization（） 方法完成 
 + 当销毁 bean 的时候如果Bean 实现了DisposableBean 接口，执行 destroy（）方法完成 
 + 当销毁Bean 的时候，如果Bean在配置文件中的定义包含destroy-method属性，执行指定的方法。

实例化 beaan 对象-> 设置对象属性值 ->  检查 Aware 相关接口并设置相关依赖-> BeanPostProcessor 前置处理器->
检查是否是 InitializingBean 决定是否调用 afterPropertiesSet 方法 -> 检查是否配置有自定义的 init-method方法->
调用 beanPostProcessor 后置处理器-> 注册表要的Destruction 相关回调接口->使用中-> 是否实现->DisposableBean接口

** springMvc 的工作原理

1. 客户端发起请求 直接请求到 DispatcherServlet
2. DispatcherServlet 根据请求信息的调用 调用handlerMapping 解析请求的 handler
3. 解析道handler （平时的controller）之后由HandlerAdapter 适配器处理
4. HandlerAdapter 会根据 Handler 来调用真正的处理器开始处理请求，处理业务逻辑
5. 处理器完成作业之后，会返回一个ModelAndView 对象，Model 是返回的数据对象，View 是逻辑上的eView
6. ViewResolver 会根据逻辑View 查找到实际 的View
7. DispaterServlet 就把返回的Model 传给View（视图渲染）
8. 把View 返回给浏览器

** Spring框架中用了那些设计模式

+ 工厂设计模式： Spring使用工厂设计模式 通过BeanFactory、ApplicationContext 创建 bean 对象
+ 代理设计模式： SpringAop 功能的实现
+ 单例设计模式： Spring中的Bean默认都是单例的
+ 模板方法模式：Spring中的jdbcTemplate、hibernateTemplate 等以Template 结尾对数据库操作的类，他们就使用到了模板模式
+ 包装器设计模式：链接多个数据库时，而且不同的客户在每次访问中根据需要会去访问不同的数据库
+ 观察者模式：Spring 事件驱动模型就是观察者模式很经典的应用

** @Component 和 @Bean 的区别是什么

1. 作用对象不同 @Component 注解作用于类 而@Bean注解作用于方法
2. @Component 通常是通过类路径扫描自动侦测和装载(可以用@ComponentScan注解定义要扫描的路径从中找出标示了需要装载类自动装配到Spring 的bean 容器中)。@Bean 注解通常是我们
在该注解的方法中定义产生了这个bean @Bean 告诉了Spring 这是讴歌类的实例，当需要的时候反给我
3. @Bean 注解比 Component 注解自定义性更强，而且很多地方我们只能通过@Bean 注解来注册Bean 比如当我们引用第三方类需要装配到Spring 时只能通过@Bean 来实现

** 将一个类声名为Spring 的bean 的注解有哪些？

我们一般使用@Autowired 注解自动装配 bean 要想把类识别城可用于@Autowired 注解自动装配的bean 的类，采用以下注解可以实现
 + @Compnent :可以将任意类为Spring组件。如果一个Bean不知道属于哪个层，可以使用@Component注解标柱
 + @Repository ： 对应持久层即 Dao 层，主要用于数据库相关操作
 + @Service 声名服务层 主要是涉及复杂的业务逻辑 需要用到 Dao层
 + @Controller ：对应SpringMVC 的控制层，主要用户接受用户请求并调用Service 层返回数据给前段

** Spring 事务管理有几种方式
 1. 编程式事物，在代码中编程（不推荐）
 2. 声名式事务，在配置文件中配置
*** 声名式事务又分为两种
 1.基于xml的声名式事务
 2.基于注解的声名式事务

** Spring 事务中的隔离级别又哪几种

*** TransactionDefinition 接口中定义了五个表示隔离界别的常量
+ TransactionDefinition.ISOLATION_DEFAULT :使用后端数据库默认的隔离级别，Mysql 默认采用的是 REPETABLE_READ 隔离界别 ORACLE 采用的是 READ_COMMITTED
+ TransactionDefinition.ISOLATION_READ_UNCOMMITTED :最低的隔离级别，允许读取尚未提交的数据变更，可能会导致脏读、幻读、不可重复读、
+ TransactionDefinition.ISOLATION_READ_COMMITED:  允许读取并发事务已经提交的数据，可以阻止脏读，但是幻读和不可重复读还是有可能发生
+ Transactiondefinition.ISOLATION_REPEATABLE_READ: 对统一字段多次读取结果都是一直的，除非数据本身的事务修改 可以阻止脏读和不可重复读，但是会有幻读发生
+ Transactiondefinition.ISOlation_SERIALIZABLE: 相当于mysql 里面的序列化 事务变为传行的



