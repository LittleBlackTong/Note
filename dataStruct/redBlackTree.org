* 红黑树

https://www.cnblogs.com/crazymakercircle/p/16320430.html

** 红黑树的特性

1.节点非红即黑
2. 跟节点一定是黑色
3.叶子节点一定是黑色
4.每个红色节点的两个子节点都为黑色。
5.从任意节点到每个叶子节点的所有路径，都包含相同数目的黑色节点


** 插入数据的场景

1. 红黑树为空树

直接插入根节点

2. 插入节点已经存在

更新当前的值

3.插入节点父节点为黑色

由于默认插入红色节点，不会影响树平衡 直接插入。

4. 插入节点的父节点为红色
分两种情况
（1） 父亲和叔叔都是红色
父亲和叔叔都为红色，那么爷爷肯定是黑色。
如果插入，那么颜色变成 黑红红 不满足红色不能相连，需要变色处理。
由黑红红->红黑红 。 这时如果爷爷的父节点是红色，违反了规则，那么就子平衡处理。直到平衡位置
如果是黑色，那么就结束

（2） 父亲为红色 叔叔为 黑色

（2-1）父亲和插入的节点都是左节点（LL 失衡），那么这个时候，第一步变色，

红红黑 变成 红黑红，然后在右旋。
（2-2）父亲是左节点，插入节点是右节点 (LR失衡)， 这个时候第一步先 左旋，
第二部，变色 第三部右旋 上层节点。
     

** 二叉搜索树，为什么还要平衡二叉树？

二叉搜索树，容易退化成一条链， 时间复杂度，从 O（logn）变成 o（n）


1.有了平衡二叉树，为什么还要红黑树
AVL 高度差不能超过1，插入删除，都需要旋转 保持平衡。消耗性能。
红黑树性能高于 AVL 树。




