* Java 锁

** 乐观锁

乐观锁是一种思想，认为读多写少，并发低，每次线程来拿数据，都是认为不会修改，在更新的时候会判断一下有没有其他线程来更新数据
写的时候先读取数据版本号，然后加锁操作，如果失败，则需要重复读-比较-写 的过程，
java 中的乐观锁，都是通过 cas 的机制来实现的，cas 是一种原子操作比较当前的值是否和传入的值 相同，如果相同则更新否则失败。

** 悲观锁
则是悲观事项，任务写多读少，并发的时候每个线程都会修改这个数值，所以每次读写数据的时候都会上锁，别人想读写这个数据的时候就会阻塞，
直到拿到锁，java 中的悲观锁 就是 synchronized AQS 框架下的锁，都是先尝试 cas 乐观先获取锁，获取不到，才会转化成悲观锁。如 retreenlock


** 自旋锁
自旋锁道理很简单，就是持有锁的线程可以在很短的时间内释放锁，那么可以让其他等待锁竞争的线程就不需要在 内核和用户太之间转换，
他们只需要等一等 （自旋），持有锁的线程释放锁了之后就可以立即获取锁这样可以避免用户线程和内核的切换。

自旋锁是消耗cpu 的，让cpu 做无用功，所以需要设置一个最大自旋时间。


** Synchronized 同步锁

他是悲观锁，也是可重入锁，

1. synchronized 作用方法时锁住的是对象实例，
2. 当用作静态方法的时候 锁住的是 class 实例，因为class相关数据是放在 永久带的，永久带是共享的，所以静态方法锁是一个全局的锁，会锁住
所有调用该方法的线程。
3.sychronized 作用对象实例的时候，锁住的是以该对象为锁的代码快，他又多个队列，当线程一起访问某个对象的监视器的时候，监视器会将线程放入不同的容器
里。

** synchronized 的核心组件
在很短的时间内释放锁，那么可以让其他等待锁竞争的线程就不需要在 内核和用户太之间转换，
他们只需要等一等 （自旋），
1. wait set 那些调用了 wait方法的阻塞线程会放在这个里。
2. contentionList 竞争队列，所有请求锁的线程会放在这个队列里
3. entry list 有资格成为候选资源的线程会放在这个队列里，
4. ondeck，任意时刻，最多只有一个竞争锁资源的线程被成为 ondeck
5. owner 拿到锁的线程被成为 owner
6. ！owner 当前释放锁的线程

** synchronized 特点
1.synchronized 锁是非公平锁，线程先进入 contentionList 中会先自旋尝试获取锁，获取不到就直接进入 contentionList，
对先进入队列的线程是不公平的，而且自旋的时候有可某个线程直接 ondeck 抢到线程锁资源。

2。每个对象都有monitor 对象的，加锁就是在竞争monitor 对象，代码块加锁则是 在前后分别有 monitorenter 和 monitorexist 通过标记位置来实现的。

3.synchronized 是重量级锁，需要调用系统相关接口，有可能加锁，比有用操作更耗时，

4.jdk 1.6 之后做了很多优化，适应自旋，锁消除，轻量锁偏向锁，1.7 和1.8 也对进行了优化，引入了偏向锁和轻量锁，对象头中有标记为，不再需要系统加锁了，

5.锁可以从偏向锁，升级到轻量锁，再到重量锁，这个过程叫做锁膨胀。

** 实现过程

1.jvm 每次队列尾部取一个线程用于锁竞争，并发情况下 contentionList 会被大量的并发线程进行cas 访问，为了降低对尾部的元素的竞争，JVM，将一部分线程移动到
entryList 中作为候选竞争线程

2.Owner 线程会在 unlock时，将 contentionList 中的的部分线程EntryList 中，并指定 entryList 中的某个线程为 OnDeck线程，把锁竞争的权利给 OnDeck
OnDeck 需要重新竞争锁。

3.ondeck 线程获取到锁的资源之后会变成 owner 线程，没有得到锁资源就仍然停留在 entryList 中，如果 Owner 线程被 wai方法阻塞，则转移到 waitSet 中。
直到被 notify 或者notifyAll 唤醒，重新进入到 EntryList 中。

4.等待线程会自旋尝试 获取锁，如果获取不到，就进入contentionList 明显对进入队列的线程是不公平的，还有一个不公平的事情就是自旋获取锁的时候可能直接抢占Ondeck线程的锁资源

5. 每个对象都有一个 monitor对象，加锁就是在竞争 monitor 对象，代码快加锁则是在前后分别加上 monitorenter 和 monitorexit 来实现的，

6. synchronized 是重量级锁，需要调用系统相关接口，

** ReentrantLock

Reentrantlock 继承lock 接口，并实现了其中定义的方法，是一种可冲入锁，除了能实现syncronizede 功能 外可以提供 响应中断锁，
可轮询锁请求，定时锁，避免多线程死锁的方法。

主要方法有

1. void lock（） 方法如果锁处于空闲状态，当前线程就获取到锁
2. boolean tryLock（） 锁可用则获取锁，并立即返回 trye 否则返回 false， 和lock 的区别的不会导致线程阻塞，可以返回做其他事情，lock 一定获取到锁。
3. void unlock （） 当前线程释放锁，
4. condition newCondition 条件对象等待通知组件。组件和锁绑定，当线程获取锁了之后，才能调用罪案的额 await（）而调用后线程释放锁。
5. getHoldCount 查询当前线程保持此锁的次数，也就是执行此线程执行lock 方法的次数。
6.getQueueLength 返回等待获取锁的线程数量。
7.getWaitQueueLength 等待此锁相关给定刁奸的线程估计数。
8.hasWaiters 查询是否有线程等待此锁有关给定的特定条件
9.hasQueueThread 查询特定线程是否获取此锁
10.hasQueuedThreads 是否有线程等待此锁
11.isFair 是否是公平锁
12.isHeldByCurrentThread（） 当前线程是否保持锁锁定。
13 isLock（）是否其他线程占用
14 lockInterruptibly 当前线程未被终端，获取锁
15 tryLock 此锁是否有任意线程占用。
16，tryLock（timeout ，timeunit） 给定事件没有获取锁，

** Semaphore 信号量

Semaphore 是一种基于计数的信号量，它可以设定一个阈值，基于此，多个线程竞争获取许可信号，做完自己的申请后归还。
超过阈值后 线程申请会被信号量阻塞，semaphore 可以用来构建一些对象池，资源池之类的，比如数据库连接池。

我们可以创建计数为1 的Semaphore 作为类似互斥锁的机制，也叫二元信号量。

```
semaphore semp =new semaphore（5）

try {
   semp.acquire ()
   try {
     //dosmothing
   }cacth (Exception e) {
   }finally () {
     semp.release ();
   }
}

```

** AtomicInteger

原子操作 integer 类，通过 cas 进行比较替换，效率很高

** 可重入锁

只同一线程 外层函数获得锁之后，内城递归函数仍然有获取该锁的代码，但是不受影响。 synchronized 和 reentrantLock都是可重入锁


** 重量级锁

通过内部监视器 monitor 来实现的，本质以来系统mutexLock 来实现，这种锁称为重量锁

** 轻量锁

** 分段锁
** 锁优化
1.减少锁持有事件
2.减小颗粒度

** 锁分离
最常见的锁分离就是读写锁 ，读读不互斥 读写互斥，写写互斥。保证线程安全，同时提高性能。

** 线程的基本方法

1.wait 线程等待
2.sleep 线程睡眠
3.yield 线程让步
4.interrupt 线程终端
5.join 等待其他线程终止
6.notify 唤醒线程
