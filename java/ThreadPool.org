* 线程池

** 线程池原理
线程池主要工作就是控制运行线程的数量，处理过程中将任务放入队列，然后在线程创建后启动这些任务，如果线程数量超过了最大数量， 超出数量排队等候，
等其他线程处理完毕在从队列中区任务来执行，主要特点，线程复用，控制最大并发数，管理线程。

** 线程复用
每一个Thread 都有一个 start 方法，当调用 start 启动线程的时候，java 虚拟机会调用该类的 run方法， 就是调用了 runable 对象的run 方法。
我们可以集成重写 thread 类，在start 方法中添加不断循环调用传递过来的 runnable 对象，线程池的实现原理。循环方法中不断获取 runnable 就是用 queue
实现的。获取 runnable 之前可以是阻塞的。

** 线程池的组成部分有
1.线程池管理器，管理线程池
2.工作线程，线程池中的线程
3.任务接口，任务必须实现的接口用户工作线程调用其运行
4.任务队列，存放待处理任务，

** 创建线程池的主要参数

1.corePoolSize 指定线程池中的线程数量
2.maxmumPoolSize 制定了线程池中的最大线程数量
3. keepAliveTime 当线程池数量超过了 corePoolSize时 多余的空闲线程存货时间，即多次时间内会被销毁
4. uit 时间单位
5. workQueue 任务队列，被提交但尚未被执行的任务
6. threadFactory 线程工厂，用于创建线程，一般用默认的即可
7 handler 拒绝策略，任务太多来不及处理时候的 拒绝任务。

** 拒绝策略有哪些

1.abortPolicy 直接抛出异常阻止正常运行
2.CallerRunspolicy 线程池未关闭，策略在调用者线程中运行，
3.discardOldPolicy 丢弃最老的一个请求，即将被执行的一个任务，并且再次尝试提交当前任务
4. diacardPolicy 该策略默默丢弃无法处理的任务，不予任何处理，

** 线程池工作过程
1.线程池刚创建时没有任何线程，任务队列作为参数传递进来的，就算有任务也不会马上执行。
2.当调用execute 方法添加任务时，线程会做判断
（1） 正在运行的线程小于corepoolsize 马上创建线程执行这个任务
（2）如果正在运行的数量大于胡综合等于 corepoolsize 那么将这个任务放入队列中
（3）如果这个时候队列满了并且运行线程数量小于 maximumPoolSize 那么创建非核心线程立刻运行这个任务
（4） 如果队列满了，而且运行数量大于 maximumPoolsize，那么抛出异常进行拒绝
3.当线程完成任务，从队列中取出下一个任务来执行，
3.当一个线程无事可做，超过一定的时间，线程池会判断如果当前运行线程数大于corePoolSize 那么这个线程就会被停掉，最后线程池大小会回到原来的 
corePoolSize的大小。

** java 中的阻塞队列

1. arrayBlockQueue 数组结构组成的有界阻塞队列。 指定公平和非公平
2. linkedblockQueue 由链表接哦股组成的有界阻塞队列。 两个独立的锁提高并发
3. priorityBlockingQueue 支持优先级的排序无界队列（compareTo 排序实现优先）
4.DelayQueue 使用优先级 队列实现的无界阻塞队列（缓存失效，定时任务）
5.SynchronousQueue 不存储元素的阻塞队列（不储存数据，用于传递数据）
6.linkedTransferQueue 链表构成的无界阻塞队列（）
7.linkedBlockingQeque 链表组成的双向阻塞队列。

** countDownLatch 线程计数器

** CyclicBarrier （回环阑珊，等待之barrier 状态在全部同时执行）

** Semaphore （信号量 控制同时访问的线程个数）

