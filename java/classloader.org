* 类加载器

JDK 自带的三个类加载器： bootstrap Classloader ExtClassLoader， AppClasLoader

** 类加载的过程

.java 文件经过 java 编译器编译成拓展名为 .class 的文件， class 文件中包含虚拟指令。当使用哪个类的时候虚拟机会将他的.class
文件加载，并创建 class 对象， 将 class 文件加载到虚拟机内存，这个过程成为类加载。

*** 加载过程

加载 -> 验证 -> 准备 -> 解析 -> 初始化 

:: 加载： 是类加载的一个节点，通过一个类的完全限定查找此类字节码文件，并利用字节码文件创建一个 class 对象

:: 验证： 目的在于保证 class 文件的字节流中包含的信息符合虚拟机要求，不会符合虚拟机自身的安全。主要包含四种验证

1. 文件格式验证
2. 元素数据验证
3. 字节码验证
4. 符号引用验证

:: 准备： 为变量 （static修饰的字段变量） 分配内存并且设置该类的变量的初始化值即 0 （如 static int i=5；初始化成0
至于 5 的值将在初始化时复制），这里不包含用 final 修饰的 static，因为final 在编译的时候就会分配了，注意：这里不会为
实例变量分配初始化， 类变量分配会在方法区中，而实例变量是会随着对象一起分配到 java 堆中的。

:: 解析：主要将常量池中的服务号引用替换成为直接引用的过程。符号引用就是一组符号来描述目标，可以是任何字面量，直接引用
就是直接指向目标助阵，相对偏移量或一个简介定位到目标的句柄。有类或接口的解析，字段解析，类方法解析，接口方法解析

:: 初始化： 类加载的最后阶段，若该类有超类，则对齐进行初始化，执行静态初始化器，和静态初始化成员变量。

*** bootstrap 类加载器

加载内容是 jvm 自身需要的类，这个类加载使用 c++ 语言实现的，是虚拟机自身的一部分，它负责将 java_home/lib 路径下的内容
加载到内存当中，出于安全考虑只会加载包名为 java，javax，sun 等开头的包

*** extension 类加载器

sun公司开发的 sun.misc.launcher$ExtClassLoader 类，由 java 语言实现的，是Launcher 的静态内部类，它负责加载 
java_home/lib/ext 目录下或者由系统变量-Djava.ext.dir 指定位路径中的类库，开发者可以 直接使用标准扩展类加载器

*** system/app 类加载器

sun 公司实现的  appClassLoader 它负责加载系统路径 java -classpath 或 -D java.lasss.path 指定路径
下的类库，开发者可以直接使用系统类加载器，java 虚拟机是按需加载的， 采用的是双亲委派模式，

** 双亲委派模式

工作原理是，如果一个类加载器收到了类的加载请求，它不会自己先去加载，而是把这个请求委托给父类的加载器去执行，如果父类
加载器还存在在其父类加载器，则进一步向上委托，一次递归，请求最终将到达顶层的类加载器，如果弗雷加载器可以完成类加载任务，
就成功返回，倘若父类加载器无法完成此加载任务子加载任务才会尝试自己加载。

优势：
双亲委派模式的好处就是，它随着类加载器一起具备了一种带有优先级的层次关系，通过这种层级关系可以避免类的重复加载，当父亲
已经加载了该类时，就没有必要子ClassLoader 再加载一次。其次是考到安全因素，java 核心api不会被随意替换。

*** loadClass（String）

1. 先从缓存中查找该 class 对象，找到就不用重新加载
2. 如果找不到就委托给父类去加载
3. 如果没有父类，那么就委托启动加载器去加载
4. 如果都没有找到，那么通过自定义实现的 findClass 去查找并加载

*** findClass

在自定义类加载时，总会去继承 classloader 类并且重写 loadClass 方法，但是 jdk1.2之后不再建议用户去覆盖 loadClass 了
而是，建议把自定义的类加载罗技写在findClass 方法中。本身 findClass 是会抛出异常的，需要进行重写

*** defineClass 

defineClass 是用来将byte字节流解析成 JVM 能够识别的 Class 对象 通过这个方法不仅能够通过class文件实例化 class 对象，d
也可以通过其他方式实例化class 对象，如通过网络接收一个类的字节码，然后转换为 byte 字节流创建对应的 class对象

** 类加载器的关系

启动类加载器， C++ 实现，没有父类
拓展类加载器（ExtClassLoader）， java 语言实现，父类加载器为 null
系统类加载器（AppClassLoader），由java 语言实现，父类加载器为 ExtClassLoader
自定义加载器，父类加载器肯定为 AppClassLoader

