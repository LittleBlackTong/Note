* java 基础知识

** 为什么使用线程池，解释一下参数

1. 降低资源消耗；提高利用率，降低创建和销毁的线程消耗。
2. 提高响应速度；任务来了直接有可用线程可以执行，而不是先创建线程在执行。
3. 提高线程管理性；线程是稀缺资源

*** 主要参数 

corePoolSize ：代表核心最大线程数，正常情况下创建的线程数。线程创建后并不会消失，常驻线程
maxinumPoolSize： 最大线程数，与核心线程数相对应， 业务高峰期的时候的最多线程的数量
keepAliveTime ；unit ：代表超出核心线程数之外的线程空闲是存活时间，也就是核心线程不会消除，但是超出的线程会被消除，可以通过 setKeepAliveTime 来这只空闲时间
workQueue； 工作队列，执行任务的队列， 假设我们现在核心的线程都被使用，还有任务进来，那么就会全部放入队列直到整个队列被放满了，但任务还再持续进入则会创建新的线程。
ThreadFactory；实际上是一个线程工厂，用来生产线程执行任务。我们可以选择使用默认的创建工厂，产生的线程都在同一个 组内，拥有相同的优先级，且都不是守护线程。
handler； 任务拒绝策略，有两种情况，第一种是当我们调用shutdown 等方法关闭线程池后，这时候即使线程池内部还有没有执行完的任务正在执行，但是由于线程池已经关闭，我们在继续想


** 线程池的处理流程

1. 判断核心线程是否满了->未满->创建核心线程执行
2. ->满了->任务队列是否已满->未满-> 将任务放入到队列中
3. ->满了->最大线程数是否达到->未达到-> 创建临时线程
4. ->达到->根据拒绝策略处理

** 线程池中阻塞队列的作用？ 为什么是先添加队列，而不是先创建最大线程


1. 一般队列只能保证作为一个有限长度的缓冲区，如果超出了缓冲长度，就无法保留当前的任务了，阻塞队列通过阻塞可以保留住当前想要的继续入队的任务。
阻塞队列可以保证任务队列中没有任务时阻塞获取任务的线程，使得线程进入wait状态，释放 cpu 资源。阻塞队列自带环境和阻塞的功能，不需要额外处理，无任务执行时，线程池
利用阻塞队列 take 方法挂起不会一直占用 cpu 资源。
2. 在创建新的线程的时候，是要获取全局锁的，这个时候其他的就得阻塞影响整体效率。


** 线程池中的复用原理

线程池将线程 和任务进行解耦，线程是线程，任务是任务，摆脱之前的通过thread创建线程时的一个线程必须对应一个任务的限制。
在线程池中，同一个线程可以从阻塞队列中不断获取新的任务来执行，其核心原理在于线程池对 Thread 进行了封装，并不是每次执行任务都会调用 thread.start() 来创建
新的线程，而是让每个线程去执行一个循环任务，这个循环任务重不停的检查是否有任务需要被执行，如果有则直接执行，也就是调用任务重的run 方法，将run 方法当成一个普通方法执行，
通过这种方式只是用固定的线程就能将所有任务的run方法串联起来。

